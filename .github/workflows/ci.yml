name: Continuous Integration

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      coverage:
        description: "Run with coverage tests"
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PHP_VERSION: 8.3
  PHP_EXTENSIONS: mbstring,pdo,xml,ctype,fileinfo,json,curl,openssl,dom,zip
  PHP_INI_PROPERTIES: post_max_size=256M,upload_max_filesize=256M

jobs:
  setup:
    name: Setup PHP
    runs-on: ubuntu-24.04
    outputs:
      combined-key: ${{ steps.prepare-env.outputs.combined-key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - name: Prepare environment and composer data
        id: prepare-env
        run: |
          composer_dir=$(composer config cache-files-dir)
          composer_hash=${{ hashFiles('**/composer.lock') }}
          os_lower=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
          arch_lower=$(echo ${{ runner.arch }} | tr '[:upper:]' '[:lower:]')
          combined_key="${os_lower}-${arch_lower}-composer-${composer_hash}"
          echo "combined-key=${combined_key}" >> "$GITHUB_OUTPUT"
      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_PROPERTIES }}
      - name: Install composer dependencies
        uses: ramsey/composer-install@57532f8be5bda426838819c5ee9afb8af389d51a # v3.0.0
        with:
          composer-options: "--optimize-autoloader --prefer-dist"
          custom-cache-key: ${{ steps.prepare-env.outputs.combined-key }}
  lint:
    name: Perform lint
    runs-on: ubuntu-24.04
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_PROPERTIES }}
      - name: Install composer dependencies
        uses: ramsey/composer-install@57532f8be5bda426838819c5ee9afb8af389d51a # v3.0.0
        with:
          composer-options: "--optimize-autoloader --prefer-dist"
          custom-cache-key: ${{ needs.setup.outputs.combined-key }}
      - name: Run Pint
        run: ./vendor/bin/pint --no-interaction --test --preset=laravel
  tests:
    name: Run tests
    runs-on: ubuntu-24.04
    needs: setup
    env:
      BROADCAST_DRIVER: log
      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PASSWORD: postgres
      DB_USERNAME: postgres
      DB_DATABASE: postgres
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - name: Setup PHP
        uses: shivammathur/setup-php@c541c155eee45413f5b09a52248675b1a2575231 # v2.31.1
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ${{ env.PHP_EXTENSIONS }}
          ini-values: ${{ env.PHP_INI_PROPERTIES }}
          coverage: "xdebug"
      - name: Install composer dependencies
        uses: ramsey/composer-install@57532f8be5bda426838819c5ee9afb8af389d51a # v3.0.0
        with:
          composer-options: "--optimize-autoloader --prefer-dist"
          custom-cache-key: ${{ needs.setup.outputs.combined-key }}
      - name: Prepare the application
        run: |
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan config:clear
          php artisan key:generate
      - name: Run Migration
        run: php artisan migrate --seed -v
        env:
          DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: Run tests
        run: php artisan test
        env:
          DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: Run coverage tests
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.coverage == 'true' }}
        run: php artisan test --coverage --min=90
        env:
          DB_PORT: ${{ job.services.postgres.ports['5432'] }}
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
  deploy:
    name: Deploy on Forge
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-24.04
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'develop' }}
    needs:
      - tests
      - lint
    steps:
      - name: Checkout code
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      - name: Get the latest commit message
        id: get_commit_message
        run: |
          echo "message=$(git log -1 --pretty=%s)" >> "$GITHUB_OUTPUT"
      - name: Print GitHub Context
        run: |
          echo "### GitHub Context ###"
          echo "Event Name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref_name }} | ${{ github.ref }}"
          echo "Commit title: ${{ steps.get_commit_message.outputs.message }}"
          echo "Commit Hash: ${{ github.sha }}"
          echo "Actor: ${{ github.actor }}"
      - name: Trigger Deployment on Laravel Forge
        run: |
          curl -fsSL -X POST \
            "https://forge.laravel.com/api/v1/servers/${{ secrets.FORGE_SERVER_ID }}/sites/${{ secrets.FORGE_SITE_ID }}/deployment/deploy" \
            -H "Authorization: Bearer ${{ secrets.FORGE_API_TOKEN }}" \
            --data-urlencode "forge_deploy_branch=${{ github.ref_name }}" \
            --data-urlencode "forge_deploy_commit=${{ github.sha }}" \
            --data-urlencode "forge_deploy_author=${{ github.actor }}" \
            --data-urlencode "forge_deploy_message=${{ steps.get_commit_message.outputs.message }}" \
            > /dev/null
      - name: Wait for deployment to complete
        run: |
          MAX_ATTEMPTS=20
          ATTEMPT=0
          STATUS="in_progress"
          LATEST_COMMIT="${{ github.sha }}"

          while [[ "$STATUS" == "in_progress" || "$STATUS" == "null" ]] && [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            echo "Checking deployment status (Attempt $((ATTEMPT+1))/$MAX_ATTEMPTS)..."

            RESPONSE=$(curl -fsSL -X GET \
              "https://forge.laravel.com/api/v1/servers/${{ secrets.FORGE_SERVER_ID }}/sites/${{ secrets.FORGE_SITE_ID }}/deployment-history" \
              -H "Authorization: Bearer ${{ secrets.FORGE_API_TOKEN }}" \
              -H "Accept: application/json")

            LATEST_DEPLOYMENT=$(echo "$RESPONSE" | tr -d '\r\n' | jq -r --arg LATEST_COMMIT "$LATEST_COMMIT" '.deployments[] | select(.commit_hash == $LATEST_COMMIT) | .status')

            STATUS=$LATEST_DEPLOYMENT

            echo "Current deployment status: $STATUS"

            if [[ "$STATUS" == "finished" ]]; then
              echo "Deployment completed successfully."
              exit 0
            elif [[ "$STATUS" == "failed" ]]; then
              echo "Deployment failed!"
              exit 1
            else
              echo "Deployment is still in progress..."
              ATTEMPT=$((ATTEMPT + 1))
              sleep 15
            fi
          done

          if [ $ATTEMPT -ge $MAX_ATTEMPTS ]; then
            echo "Deployment timed out after $MAX_ATTEMPTS attempts."
            exit 1
          fi
